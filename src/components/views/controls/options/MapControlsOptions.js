/**
 * Provides the interface for the Options tab of the map controls.
 */

import { makeStyles, Box, Button, Switch, Typography } from '@material-ui/core';
import clsx from 'clsx';
import React from 'react';
import { connect } from 'react-redux';

import { f, t } from '~/components/i18n/Localization';
import BorderBox from '~/components/interface/BorderBox';
import { InputSlider } from '~/components/interface/Input';
import { TabView } from '~/components/interface/Tabs';
import { exportDataJSON } from '~/components/preferences/DataExport';
import { getApplicationVersion } from '~/components/Util';
import MapControlsOptionsLanguage from '~/components/views/controls/options/MapControlsOptionsLanguage';
import ClearMapDataPopup from '~/components/views/popups/ClearMapDataPopup';
import ExportDataPopup from '~/components/views/popups/ExportDataPopup';
import ImportDataPopup from '~/components/views/popups/ImportDataPopup';
import { clearMapPreferences } from '~/redux/ducks';
import {
  importNewDataFromString,
  importLegacyDataFromString,
  SET_IMPORT_ERROR,
} from '~/redux/ducks/import';
import {
  setClusterMarkers,
  setCompletedAlpha,
  setHideFeaturesInEditor,
  setHideRoutesInEditor,
  setOverrideLang,
  setRegionLabelsEnabled,
  setShowHiddenFeatures,
  setWorldBorderEnabled,
} from '~/redux/ducks/options';
import { setEditorEnabled } from '~/redux/ducks/ui';

const useStyles = makeStyles((_theme) => ({
  subtitle: {
    fontSize: 12,
    textAlign: 'center',
    marginBottom: 8,
    fontStyle: 'italic',
  },
  label: {
    flexGrow: 1,
  },
  labelLong: {
    margin: '0 24px 0 0',
  },
  button: {
    width: 140,
  },
  optionContainer: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 0,
    alignItems: 'center',
    marginBottom: 8,
  },
}));

// Note: The dispatchers generated by mapDispatchToProps
// shadow their associated action generators.
/* eslint-disable no-shadow */
const _MapControlsOptions = ({
  displayed,
  options,
  editorEnabled,
  setEditorEnabled,
  setCompletedAlpha,
  setWorldBorderEnabled,
  setRegionLabelsEnabled,
  setClusterMarkers,
  setHideFeaturesInEditor,
  setShowHiddenFeatures,
  setHideRoutesInEditor,
  importData,
  importLegacyData,
  clearState,
}) => {
  const classes = useStyles();

  return (
    <TabView grow displayed={displayed}>
      <Typography className={classes.subtitle}>
        {f('options-subtitle-format', { version: getApplicationVersion() })}
      </Typography>
      <MapControlsOptionsLanguage />
      <BorderBox overflow="show">
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-editor-enable')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setEditorEnabled(event.target.checked)}
            checked={editorEnabled}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-editor-hide-features')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setHideFeaturesInEditor(event.target.checked)}
            checked={options.hideFeaturesInEditor}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-editor-hide-routes')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setHideRoutesInEditor(event.target.checked)}
            checked={options.hideRoutesInEditor}
          />
        </Box>
      </BorderBox>
      <BorderBox overflow="show">
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-completed-opacity')}</Typography>
          <InputSlider
            value={options.completedAlpha}
            min={0.1}
            max={1}
            step={0.1}
            onChange={(newValue) => setCompletedAlpha(newValue)}
            valueLabelDisplay="auto"
            valueLabelFormat={(value) => `${Math.round(value * 100)}%`}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-cluster-markers')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setClusterMarkers(event.target.checked)}
            checked={options.clusterMarkers}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-world-border')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setWorldBorderEnabled(event.target.checked)}
            checked={options.worldBorderEnabled}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-region-labels')}</Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setRegionLabelsEnabled(event.target.checked)}
            checked={options.regionLabelsEnabled}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={clsx(classes.label, classes.labelLong)}>
            {t('options-show-hidden-features')}
          </Typography>
          <Switch
            size="small"
            color="primary"
            onChange={(event) => setShowHiddenFeatures(event.target.checked)}
            checked={options.showHiddenFeatures}
          />
        </Box>
      </BorderBox>
      <BorderBox overflow="show">
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-import-data')}</Typography>
          <ImportDataPopup
            title={t('options-import-data')}
            content={t('popup-import-data-content')}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('options-import-button')}
              </Button>
            }
            onConfirm={importData}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-export-data')}</Typography>
          <ExportDataPopup
            title={t('options-export-data')}
            message={t('popup-export-data-content')}
            fetchData={exportDataJSON}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('options-export-button')}
              </Button>
            }
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-clear-data')}</Typography>
          <ClearMapDataPopup
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('options-clear-data-button')}
              </Button>
            }
            onConfirm={clearState}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('options-import-yuanshen')}</Typography>
          <ImportDataPopup
            title={t('options-import-yuanshen')}
            content={t('popup-import-yuanshen-content')}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('options-import-button')}
              </Button>
            }
            onConfirm={importLegacyData}
          />
        </Box>
      </BorderBox>
    </TabView>
  );
};

const mapStateToProps = (state) => ({
  displayed: state.controlsTab === 'options',
  options: state.options,
  editorEnabled: state.editorEnabled,
});
const mapDispatchToProps = (dispatch) => ({
  setEditorEnabled: (enabled) => dispatch(setEditorEnabled(enabled)),
  setCompletedAlpha: (alpha) => dispatch(setCompletedAlpha(alpha)),
  setWorldBorderEnabled: (enabled) => dispatch(setWorldBorderEnabled(enabled)),
  setRegionLabelsEnabled: (enabled) => dispatch(setRegionLabelsEnabled(enabled)),
  setClusterMarkers: (enabled) => dispatch(setClusterMarkers(enabled)),
  setHideFeaturesInEditor: (enabled) => dispatch(setHideFeaturesInEditor(enabled)),
  setHideRoutesInEditor: (enabled) => dispatch(setHideRoutesInEditor(enabled)),
  setShowHiddenFeatures: (enabled) => dispatch(setShowHiddenFeatures(enabled)),
  setOverrideLang: (lang) => dispatch(setOverrideLang(lang)),
  importData: (data) => {
    const action = importNewDataFromString(data);
    dispatch(action);
    // Return a result to the popup to tell it whether to close.
    return action.type !== SET_IMPORT_ERROR;
  },
  importLegacyData: (data) => {
    const action = importLegacyDataFromString(data);
    dispatch(action);
    // Return a result to the popup to tell it whether to close.
    return action.type !== SET_IMPORT_ERROR;
  },
  clearState: () => dispatch(clearMapPreferences()),
});
const MapControlsOptions = connect(mapStateToProps, mapDispatchToProps)(_MapControlsOptions);

export default MapControlsOptions;
